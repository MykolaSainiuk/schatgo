basePath: /
definitions:
  dto.AddChatInputDto:
    properties:
      chatName:
        minLength: 2
        type: string
      username:
        minLength: 2
        type: string
    required:
    - username
    type: object
  dto.AddContactInputDto:
    properties:
      username:
        minLength: 2
        type: string
    required:
    - username
    type: object
  dto.ChatOutputDto:
    properties:
      _id:
        type: string
      createdAt:
        type: string
      iconUri:
        type: string
      lastMessage:
        type: string
      muted:
        type: boolean
      name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          type: string
        type: array
    type: object
  dto.LoginInputDto:
    properties:
      name:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
    - name
    - password
    type: object
  dto.LoginOutputDto:
    properties:
      token:
        type: string
    type: object
  dto.RegisterInputDto:
    properties:
      avatarUri:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
    - name
    - password
    type: object
  dto.RegisterResponseDto:
    properties:
      id:
        type: string
    type: object
  dto.UserInfoExtendedOutputDto:
    properties:
      _id:
        type: string
      avatarUri:
        type: string
      chats:
        items:
          $ref: '#/definitions/dto.ChatOutputDto'
        type: array
      contacts:
        items:
          $ref: '#/definitions/dto.UserInfoExtendedOutputDto'
        type: array
      createdAt:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  dto.UserInfoOutputDto:
    properties:
      _id:
        type: string
      avatarUri:
        type: string
      chats:
        items:
          type: string
        type: array
      contacts:
        items:
          type: string
        type: array
      createdAt:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  httpexp.HttpExp:
    description: common 422 response
    properties:
      details:
        items:
          type: string
        type: array
      message:
        type: string
    type: object
host: localhost:5000
info:
  contact:
    name: mykola.sainyuk@gmail.com
    url: https://www.linkedin.com/in/mykola-sainiuk-3b03168b/
  description: sChat REST server
  title: sChat Server API
  version: "1.0"
paths:
  /api/chat/list:
    get:
      description: Paginated list of User chats
      parameters:
      - description: page number
        in: path
        name: page
        type: string
      - description: page size
        in: path
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ChatOutputDto'
            type: array
        "404":
          description: Not found user
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      security:
      - BearerAuth: []
      summary: List chats paginated
      tags:
      - chat
  /api/chat/list/all:
    get:
      description: Unpaginated list of all user chats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ChatOutputDto'
            type: array
        "404":
          description: Not found user
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      security:
      - BearerAuth: []
      summary: List all chats
      tags:
      - chat
  /api/chat/new:
    put:
      consumes:
      - application/json
      description: Establish new chat for two users
      parameters:
      - description: New chat input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AddChatInputDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "404":
          description: Not found user
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      security:
      - BearerAuth: []
      summary: Create new chat
      tags:
      - chat
  /api/user/contact/add:
    put:
      consumes:
      - application/json
      description: Adding another user as a contact
      parameters:
      - description: New contact input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AddContactInputDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not found user
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      security:
      - BearerAuth: []
      summary: Add contact to User
      tags:
      - contact
  /api/user/contact/list:
    get:
      description: Paginated list of User contacts
      parameters:
      - description: page number
        in: path
        name: page
        type: string
      - description: page size
        in: path
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserInfoOutputDto'
            type: array
        "404":
          description: Not found user
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      security:
      - BearerAuth: []
      summary: List contacts paginated
      tags:
      - contact
  /api/user/contact/list/all:
    get:
      description: Unpaginated list of all contacts of User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserInfoOutputDto'
            type: array
        "404":
          description: Not found user
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      security:
      - BearerAuth: []
      summary: List all contacts
      tags:
      - contact
  /api/user/me:
    get:
      description: ME endpoint
      produces:
      - application/json
      responses:
        "200":
          description: User object extended
          schema:
            $ref: '#/definitions/dto.UserInfoExtendedOutputDto'
        "404":
          description: Not found user
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      security:
      - BearerAuth: []
      summary: Get user info
      tags:
      - user
  /auth/login:
    post:
      consumes:
      - application/json
      description: Make access token for user
      parameters:
      - description: Registration form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginInputDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginOutputDto'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user with name & avatar
      parameters:
      - description: Registration form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterInputDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponseDto'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/httpexp.HttpExp'
      summary: Register user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
